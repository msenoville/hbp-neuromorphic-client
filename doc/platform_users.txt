==================
For platform users
==================


Installing the Python client
============================

We strongly recommend you use virtualenv or Anaconda. The client works with Python 2.7 and Python 3.3 or newer.

::

  $ pip install hbp_neuromorphic_platform


Format of a job
===============

A job for the HBP Neuromorphic Computing Platform consists of:

  * an experiment description
  * input data
  * hardware platform configuration
  * a project name

Experiment description
----------------------

The experiment description must take the form of a Python script using the PyNN API. You must provide one of:

  * a single script, uploaded as part of the job submission
  * the file path of a single script located on your local machine
  * the URL of a public Git repository
  * the URL of a zip or tar.gz archive

In the latter two cases, the respository or archive must contain a top-level file named :file:`run.py`.
**The script must accept a single command-line argument**, the name of the backend (e.g. "nest", "spinnaker"). Any other parameters or
data files needed by the script should be provided as input files.

Input data
----------

Input data are specified as a list of data items. Each data item is the URL of a data file that should be downloaded
and placed in the job working directory. If your input data files are contained within your Git repository or zip
archive, you do not need to specify them here.

Hardware platform configuration
-------------------------------

Here you must choose the hardware system to be used ("BrainScaleS" for the Heidelberg system, "SpiNNaker" for the
Manchester (SpiNNaker) system, or "sandbox" to test your script using the PyNN "mock" backend.) and specify any
specific configuration options for the hardware system you have chosen.

.. todo:: add options for running with ESS

.. todo:: list configuration options for BrainScaleS and SpiNNaker systems

Project
-------

Projects are a way of controlling who can access job results. Each job *must* be associated with a project.


Configuring the client
======================

Before using the Neuromorphic Computing Platform you must have an account: contact Andrew Davison for this.
To interact with the Platform, you first create a :class:`Client` object, passing it your username and password

.. code-block:: python

    import nmpi

    c = nmpi.Client(username="myusername", password="abc123")

.. todo:: allow a configuration file (".nmpirc"?) for putting username, password in


Retrieve your Collab ID
=======================

You must be part at least of one collab using the Neuromorphic Computing Platform Job Manager.
Connect to the HBP Collaboratory to create a collab.

Once you are part of a collab, you can create jobs.
Before submitting jobs, you want to retrieve the collab id you want to submit your job within.


.. code-block:: python

    collab_ids = c.my_collabs()


Submitting a job
================

Simplest example: a single line job, no input data or parameter files.

.. code-block:: python

    job_id = c.submit_job(source="import pyNN", platform="localhost", collab_id="316")


Another simple example: a single file on your local machine, no input data or parameter files.

.. code-block:: python

    job_id = c.submit_job(source="/Users/andrew/dev/pyNN_0.7/examples/IF_cond_exp.py",
                          platform="BrainScaleS",
                          collab_id="316")


A more complex example: the experiment and model description are contained in a Git repository. The input to the
network is an image file taken from the internet.

.. code-block:: python

    job_id = c.submit_job(source="https://github.com/apdavison/nmpi_test",
                          platform="SpiNNaker",
                          collab_id="316",
                          inputs=["http://aloi.science.uva.nl/www-images/90/90.jpg"])


Monitoring job status
=====================

.. code-block:: python

    >>> c.job_status(job_id)
    u'submitted'



Retrieving the results of a job
===============================

.. code-block:: python

    >>> job = c.get_job(job_id)
    >>> from pprint import pprint
    >>> pprint(job)
    {u'experiment_description': u'https://github.com/apdavison/nmpi_test',
     u'hardware_config': u'',
     u'hardware_platform': u'SpiNNaker',
     u'id': 19,
     u'input_data': [{u'id': 34,
                      u'resource_uri': u'/api/v2/dataitem/34',
                      u'url': u'http://aloi.science.uva.nl/www-images/90/90.jpg'}],
     u'log': u'',
     u'output_data': [{u'id': 35,
                      u'resource_uri': u'/api/v2/dataitem/35',
                      u'url': u'http://example.com/my_output_data.h5'}],
     u'project': u'/api/v2/project/1',
     u'resource_uri': u'/api/v2/queue/19',
     u'status': u'finished',
     u'timestamp_completion': u'2014-08-13T21:02:37.541732',
     u'timestamp_submission': u'2014-08-13T19:40:43.964541',
     u'user': u'/api/v2/user/apdavison'}



Error messages
==============
